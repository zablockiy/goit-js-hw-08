{"mappings":"uDAAAA,EAUA,SAAmBC,EAAMC,GACvB,IAAIC,EAAKC,EAAMC,EAAKC,EAChBC,EAAO,EAEX,OAAO,WACLJ,EAAMK,KACNJ,EAAOK,UACP,IAAIC,EAAQ,IAAIC,KAASJ,EAIzB,OAHKD,IACCI,GAASR,EAAMU,IACdN,EAAYO,WAAWD,EAAMV,EAAOQ,IACpCL,C,EAGT,SAASO,IACPN,EAAY,EACZC,GAAQ,IAAII,KACZN,EAAMJ,EAAKa,MAAMX,EAAKC,GACtBD,EAAM,KACNC,EAAO,I,GC3BX,MAAMW,EAAgBC,SAASC,cAAc,kBAC7CF,EAAcG,iBAAiB,QAASC,EAAAnB,EAAA,EAMxC,SAAqBoB,GACnBC,EAAKD,EAAME,OAAOC,MAAQH,EAAME,OAAOE,MACvCC,aAAaC,QALE,sBAKgBC,KAAKC,UAAUP,G,GARc,MAC9DN,EAAcG,iBAAiB,UAuB/B,SAAoBE,GAClBA,EAAMS,iBACFR,EAAKS,OAAST,EAAKU,UACrBC,QAAQC,IAAIZ,GACZA,EAAKS,MAAQ,GACbT,EAAKU,QAAU,GACfX,EAAMc,cAAcC,QACpBV,aAAaW,WA5BA,uB,IAAjB,MACMf,EAAO,IAQb,WACE,MAAMgB,EAAWV,KAAKW,MAAMb,aAAac,QAV1B,wBAWf,GAAIF,EAAU,CACZ,MAAMG,EAAUzB,EAAcE,cAAc,SACtCwB,EAAa1B,EAAcE,cAAc,Y,IAC/ByB,EACGC,EADnBH,EAAQhB,MAAsB,QAAdkB,EAAAL,EAASP,aAAK,IAAdY,IAAkB,GAClCD,EAAWjB,MAAwB,QAAhBmB,EAAAN,EAASN,eAAO,IAAhBY,IAAmB,GACtCtB,EAAKS,MAAQO,EAASP,MACtBT,EAAKU,QAAUM,EAASN,O,EAf5Ba","sources":["node_modules/throttleit/index.js","src/js/03-feedback.js"],"sourcesContent":["module.exports = throttle;\n\n/**\n * Returns a new function that, when invoked, invokes `func` at most once per `wait` milliseconds.\n *\n * @param {Function} func Function to wrap.\n * @param {Number} wait Number of milliseconds that must elapse between `func` invocations.\n * @return {Function} A new function that wraps the `func` function passed in.\n */\n\nfunction throttle (func, wait) {\n  var ctx, args, rtn, timeoutID; // caching\n  var last = 0;\n\n  return function throttled () {\n    ctx = this;\n    args = arguments;\n    var delta = new Date() - last;\n    if (!timeoutID)\n      if (delta >= wait) call();\n      else timeoutID = setTimeout(call, wait - delta);\n    return rtn;\n  };\n\n  function call () {\n    timeoutID = 0;\n    last = +new Date();\n    rtn = func.apply(ctx, args);\n    ctx = null;\n    args = null;\n  }\n}\n","import throttle from 'throttleit';\n\nconst inputDataForm = document.querySelector('.feedback-form');\ninputDataForm.addEventListener('input', throttle(onInputData, 1000));\ninputDataForm.addEventListener('submit', formSubmit);\n\nconst KEY_DATA = 'feedback-form-state';\nconst data = {};\nsavedFormData();\nfunction onInputData(event) {\n  data[event.target.name] = event.target.value;\n  localStorage.setItem(KEY_DATA, JSON.stringify(data));\n  // console.log(data);\n  \n}\nfunction savedFormData() {\n  const saveData = JSON.parse(localStorage.getItem(KEY_DATA));\n  if (saveData) {\n    const inputEl = inputDataForm.querySelector('input');\n    const textareaEl = inputDataForm.querySelector('textarea');\n    inputEl.value = saveData.email ?? '';\n    textareaEl.value = saveData.message ??'';\n    data.email = saveData.email;\n    data.message = saveData.message;\n  }\n}\n\nfunction formSubmit(event) {\n  event.preventDefault();\n  if (data.email && data.message) {\n    console.log(data);\n    data.email = '';\n    data.message = '';\n    event.currentTarget.reset();\n    localStorage.removeItem(KEY_DATA);\n  }\n}\n"],"names":["$009325bfa61077d9$exports","func","wait","ctx","args","rtn","timeoutID","last","this","arguments","delta","Date","call","setTimeout","apply","$945622fd0f572e60$var$inputDataForm","document","querySelector","addEventListener","$parcel$interopDefault","event","$945622fd0f572e60$var$data","target","name","value","localStorage","setItem","JSON","stringify","preventDefault","email","message","console","log","currentTarget","reset","removeItem","saveData","parse","getItem","inputEl","textareaEl","_email","_message","$945622fd0f572e60$var$savedFormData"],"version":3,"file":"03-feedback.a351622d.js.map"}